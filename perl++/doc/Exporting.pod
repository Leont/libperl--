=pod

=head1 NAME

libperl++ - 

=head1 VERSION

This documentation refers to libperl++ version 0.0.48

=head1 EXPORTING FUNCTIONS

Functions can be exported using the add method of Interpreter.

	int some_function(const char*);
	//...
	universe.add("some_function", some_function);
	universe.call("some_function", "hello world");

	Package somewhere = universe.package("foo");
	universe.add("other_name", some_function);

libperl++ will automatically convert scalars from and to native numbers and std::strings. If needed you can define your own conversion operators as explained in L<Functions>.

=head1 EXPORTING METHODS

Let's take this class

	struct player {
		player(const std::string&);
		string get_name() const;
		pair<int, int> get_position() const;
		void set_position(pair<int, int>);

		double get_strength() const;
		void set_strength(double);
		void die(string);
	};

The class can be exported like this.

	Class<player> player_class = universe.add_class("Player");
	player_class.add(init<std::string>());
	player_class.add("get_name", &player::get_name);
	player_class.add("get_position", &player::get_position);
	player_class.add("set_position", &player::set_position);
	player_class.add("get_strength", &player::get_strength);
	player_class.add("set_strength", &player::set_strength);
	player_class.add("die", &player::die);

=head1 EXPORTING VARIABLES

Binds are a two way link between a Perl and a C++ variable. Changes to the one will be reflected in the other. You can do this using three functions.

=over 4

=item magical::readwrite(Scalar::Value& s, T variable)

=item magical::readonly(Scalar::Value& s, T variable)

=item magical::writeonly(Scalar::Value& s, T variable)

Each of them accepts a scalar as first argument and a C++ variable as second argument.

=back

You can bind a package variable using the add method of Interpreter.

	universe.add("Module::Variable", my_var);

This is a shortcut for saying

	magical::readwrite(universe.scalar("Module::Variable"), my_var);

=cut
