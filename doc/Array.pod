=head1 NAME

libperl++ - Array

=head1 VERSION

This documentation refers to libperl++ version 0.0.48

=head1 SYNOPSIS

	#Something

=head1 DESCRIPTION

An object of class C<Array> represents an interface to perl arrays. This class is very much a TIMTOWTDI one. It provides both STD style iterators and implicit iterators.

=head1 METHODS

=head2 Array::Value

=over 4

=item const Scalar::Temp operator[](int) const

=item Scalar::Lvalue operator[](int)

Get and/or set a value of an array element. If a value doesn't exist, C<undefined> is returned.

=item void push(...)

Pushes one or more values onto the end of the array. The array will grow automatically to accommodate the addition. It accepts various kinds of primitives, as well as scalar and array values.

=item const Scalar::Temp pop()

Pops an SV off the end of the array. Returns undef if the array is empty.

=item const Scalar::Temp shift()

Shifts a scalar off the beginning of the array.

=item void unshift(..)

Unshift a value at the beginning of an array.

=item const Scalar::Return_value remove(int)

Deletes the element indexed by C<key> from the array. Returns the deleted element. 

=item bool exists(int) const

Returns true if the element indexed by C<key> exists.

=item unsigned length() const

=item Length length()

Returns the length of the array. It is similar to C<scalar @array> in perl. It can be assigned to to change the length of the array.

=item void clear()

Clears an array, making it empty. Does not free the memory used by the array itself.

=item void undefine()

Undefines the array. Frees the memory used by the array itself.

=item void extend(unsigned size)

Pre-extend an array. C<size> is the index to which the array should be extended.

=item template<typename T> Array::Temp map(const T& functor) const

This method accepts a function or function object as its argument. It applies this function to each of the values in the array and makes a new array from that. The functor must accept one argument, which can be of any type Scalar::Value can convert to. The functor's return value can be of any type that can be pushed onto an array. Also note that the argument is B<not> passed as an lvalue. This is a design feature.

=item template<typename T> Array::Temp grep(const T& functor) const

This method accepts a function or function object as its argument. It applies this function to each of the values in the array and if the return value is true, it pushes the original value into the array it returns. The functor must accept one argument, which can be of any type Scalar::Value can convert to. The functor's return value can be of any type that implicitly converts to bool. Also note that the argument is B<not> passed as an lvalue. This is a design feature.

=item template<typename T> void each(const T& functor) const

=item template<typename T> void each(const T& functor)

This method accepts a function or function object as its sole argument. It applies this function to each of the values in the array. The functor must accept one argument, which can be of any type Scalar::Value can convert to. Note that the function will be offered an alias of the value, so the non-const version can be used to modify the array's values.

=item template<typename T> void each_index(const T& functor) const

=item template<typename T> void each_index(const T& functor)

This method accepts a function or function object as its sole argument. It applies this function to each of the values in the array. The functor must accept two arguments; the first being an integer, and the second can be of any type Scalar::Value can convert to. Note that the function will be offered an alias of the value, so the non-const version can be used to modify the array's values.

=item Ref<Array>::Temp take_ref() const;

Take a reference to this value.

=item String::Temp pack(const char* packstring) const;

Pack a string using a packstring. The format is described as in perlfunc and perlpacktut.

=item const Ref<Any>::Temp tie(const char* classname, list... );

This method binds a variable to a package class that will provide the implementation for the variable. Classname is the name of a class implementing objects of correct type.  Any additional arguments are passed to the "new" method of the class, TIEARRAY. 

=item void tie_to(const Scalar::Base& tier);

This method ties a value to a different value. This can be used to tie a value to an already constructed implementation object.

=item void untie();

This method unties the value.

=item Scalar::Temp tied() const;

This method returns the implementation object of a variable. On non-tied arrays it returns undef.

=item template<typename T> bool any(const T& functor) const;

=item template<typename T> bool all(const T& functor) const;

=item template<typename T> bool none(const T& functor) const;

=item template<typename T> bool notall(const T& functor) const;

These functions, derived from their equivalents in List::MoreUtils, return true if some, all, none or not all values meet the criterion given through the functor. They return false otherwise. If the array is empty, they also return false.

=item reduce<typename T, typename U> reduce(const T& functor, U initial_value = U()) const

This method does a reduction over the array

=item Const_iterator begin() const

=item Iterator begin()

Get a forward iterator pointing at the start of the array.

=item Const_iterator end() const

=item Iterator end()

Get a forward iterator pointing to the end of the array.

=item Const_reverse_iterator rbegin() const

=item Reverse_iterator rbegin()

Get a backwards iterator pointing at the end of the array.

=item Const_reverse_iterator rend() const

=item Reverse_iterator rend()

Get a backwards iterator pointing to the beginning of the array.

=back

=head2 Array

Array is a subclass of Array::Value. It supports all actions Array supports. It can be initialized in two ways:

=head2 Array::Temp

=head2 Iterators

This class provides both forward and backward random access iterators. Iterators remain valid when values are changes or when values are added to the end, but will not remain valid when a value is added to the beginning or in the middle.

=head1 DIAGNOSTICS

...

=head1 AUTHOR

Leon Timmermans (fawaka@gmail.com)
