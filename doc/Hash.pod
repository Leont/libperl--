=pod

=head1 NAME

libperl++ - Hash

=head1 VERSION

This documentation refers to libperl++ version 0.0.48

=head1 SYNOPSIS

	#Something

=head1 DESCRIPTION

An object of this class represents a perl hash. Most methods have two versions: one by string value and the other by scalar value. In most cases using the string version will be easier.

=head1 SUBROUTINES/METHODS

=over

=item const Scalar::Temp operator[](const Raw_string) const;

=item Scalar::Temp operator[](const Raw_string);

Get/set a hash element.

=item const Scalar::Temp operator[](const Scalar::Base&) const;

=item Scalar::Temp operator[](const Scalar::Base&);

Get/set a hash element. The element is looked up as a scalar key.

=item bool exists(Raw_string);

=item bool exists(const Scalar::Base&);

Checks if an element exists.

=item const Scalar::Temp erase(Raw_string);

=item const Scalar::Temp erase(const Scalar::Base&);

Erases an element from the hash. It returns the value from 

=item void clear()

Clears a hash, making it empty. Does not free the memory used by the hash itself.

=item void undefine()

Undefines the hash. Frees the memory used by the hash itself.

=item const Ref<Hash>::Temp take_ref() const;

Takes a reference to the hash.

=item template<typename T> void each(const T& functor) const;

=item template<typename T> void each(const T& functor);

Call function functor over every key/value pair in the hash. The key will be a Hash::Key_type, which can automatically converts into a string or a scalar. The value is a Scalar::Value& and will be assignable to if the hash isn't const.

=item const Array::Temp keys() const;

This method returns a list of the keys of a hash.

=item const Array::Temp values() const;

This method returns a list of the values of a hash. This will be in the same order as keys().

=item const Ref<Any>::Temp tie(const char* classname, list... );

This method binds a variable to a package class that will provide the implementation for the variable. Classname is the name of a class implementing objects of correct type.  Any additional arguments are passed to the "new" method of the class, TIEHASH. 

=item void tie_to(const Scalar::Base& tier);

This method ties a value to a different value. This can be used to tie a value to an already constructed implementation object.

=item void untie();

This method unties the value.

=item Scalar::Temp tied() const;

This method returns the implementation object of a variable. On non-tied hashes it returns undef.

=back

=head1 DIAGNOSTICS

This class will not throw exceptions.

=head1 AUTHOR

Leon Timmermans (fawaka@gmail.com)

=cut
