=pod 

=head1 NAME

libperl++ - Install

=head1 VERSION

XXX

=head1 SYNOPSIS

 perl Build.PL
 ./Build
 ./Build test
 ./Build install

=head1 BEFORE YOU START

Compiling libperl++ requires a number of dependencies to be fullfilled

=over 4

=item * perl 5.8 or higher. perl 5.10 or higher is recommended.

=item * A recent C++ compiler. Compilers that should be able to compile libperl++ are:

=over 2

=item * GCC 4.4 or higher

GCC support is well tested.

=item * MS Visual C++ 2010

Note that due to the state of Perl's C++ toolchain on Windows, MSVC++ support is sadly theoretical currently.

=back

Recent version of the Intel and Codeweavers compilers might work too, but have not been tried in any way.

=item * The Boost libraries. Note that this only includes headers, not runtime libraries.

=item * Some Perl libraries

=over 4

=item * Archive::Tar (included in perl 5.10.0)

=item * ExtUtils::CBuilder (included in perl 5.10.0)

=item * Module::Load (included in perl 5.10.0)

=item * TAP::Harness 3 (included in perl 5.10.1)

=back

=back

=head1 BUILDING

libperl++'s build process is Build.PL compatible. All actions take options in the form C<options=value>, though if no value is given 1 is assumed.

=head2 Creating the Build executable

The Build executable can be generated by issuing

 perl Build.PL

Any options given to it will be saved and passed on to all subsequent calls of Build. Most options for Build actions are specific for that action, except C<quiet>, which is used by almost all Build actions. The default is 0.

=head2 Building the library

 ./Build

This can take one option:

=over 4

=item * --include_dir <dir>

This argument adds a directory to the include path. It can be repeated to include multiple paths. In particular, you may need this on some platforms to indicate the location of boost.

=back

=head2 Running tests

 ./Build test

The amount of information given depends on the value of C<quiet>. It can take values from -1 to 3, from printing out individual tests to printing out nothing.

=head2 Installing the library

 ./Build install

Install can take a number of options

=over 4

=item * --install_path type=path

This sets the install path of C<type> to C<path>. Type can be any of these:

=over 4

=item * lib

=item * headers

=item * libdoc

=item * so

=back

=item * --installdirs <target>

Sets the install target to C<target>. Target should be either C<site> (the default), C<vendor> or C<core>.

=item * --install_base <base-path>

Install the targets to paths derived from C<base-path>.

=back

=cut

